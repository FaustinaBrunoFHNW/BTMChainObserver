package ch.brugg.fhnw.btm.contracts;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.11.
 *
 * Generated with:
 * web3j solidity generate -b .\src\main\resources\solidity\Registry\out\SimpleRegistry.bin -a .\src\main\resources\solidity\Registry\out\SimpleRegistry.abi -o .\src\main\java -p io.kauri.tutorials.java_ethereum.contracts
 */
@SuppressWarnings("rawtypes")
public class SimpleRegistry extends Contract {
    public static final String BINARY = "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060035534801561005c57600080fd5b506134ef8061006c6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306b2ff471461014357806313af40351461019e57806319362a28146101e15780633f3935d114610250578063432ced04146102a35780634f39ca59146102df5780636795dbcd1461032857806369fe0e2d146103b157806379ce9fac146103f65780638da5cb5b1461045f57806390b97fc1146104b6578063926988141461051b5780639890220b14610564578063ac4e73f914610593578063ac72c12014610606578063c3a358251461064f578063ddca3f43146106ac578063deb931a2146106d7578063df57b74214610748578063e30bd740146107b9578063eadf976014610875578063ef5454d6146108e0578063f25eb5c114610953578063f6d339e41461096a575b600080fd5b34801561014f57600080fd5b50610184600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109eb565b604051808215151515815260200191505060405180910390f35b3480156101aa57600080fd5b506101df600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a4b565b005b3480156101ed57600080fd5b5061023660048036038101908080356000191690602001909291908035906020019082018035906020019190919293919293908035600019169060200190929190505050610b64565b604051808215151515815260200191505060405180910390f35b34801561025c57600080fd5b50610289600480360381019080803590602001908201803590602001919091929391929390505050610d5f565b604051808215151515815260200191505060405180910390f35b6102c560048036038101908080356000191690602001909291905050506110d7565b604051808215151515815260200191505060405180910390f35b3480156102eb57600080fd5b5061030e6004803603810190808035600019169060200190929190505050611232565b604051808215151515815260200191505060405180910390f35b34801561033457600080fd5b5061036f60048036038101908080356000191690602001909291908035906020019082018035906020019190919293919293905050506116ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103bd57600080fd5b506103dc600480360381019080803590602001909291905050506117f0565b604051808215151515815260200191505060405180910390f35b34801561040257600080fd5b506104456004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611894565b604051808215151515815260200191505060405180910390f35b34801561046b57600080fd5b50610474611a87565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c257600080fd5b506104fd6004803603810190808035600019169060200190929190803590602001908201803590602001919091929391929390505050611aac565b60405180826000191660001916815260200191505060405180910390f35b34801561052757600080fd5b5061054a6004803603810190808035600019169060200190929190505050611baa565b604051808215151515815260200191505060405180910390f35b34801561057057600080fd5b50610579611cbd565b604051808215151515815260200191505060405180910390f35b34801561059f57600080fd5b506105ec600480360381019080803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dcd565b604051808215151515815260200191505060405180910390f35b34801561061257600080fd5b506106356004803603810190808035600019169060200190929190505050612382565b604051808215151515815260200191505060405180910390f35b34801561065b57600080fd5b506106966004803603810190808035600019169060200190929190803590602001908201803590602001919091929391929390505050612495565b6040518082815260200191505060405180910390f35b3480156106b857600080fd5b506106c1612597565b6040518082815260200191505060405180910390f35b3480156106e357600080fd5b50610706600480360381019080803560001916906020019092919050505061259d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561075457600080fd5b506107776004803603810190808035600019169060200190929190505050612696565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107c557600080fd5b506107fa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061278f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083a57808201518184015260208101905061081f565b50505050905090810190601f1680156108675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561088157600080fd5b506108c6600480360381019080803560001916906020019092919080359060200190820180359060200191909192939192939080359060200190929190505050612870565b604051808215151515815260200191505060405180910390f35b3480156108ec57600080fd5b50610939600480360381019080803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a6e565b604051808215151515815260200191505060405180910390f35b34801561095f57600080fd5b50610968612d34565b005b34801561097657600080fd5b506109d16004803603810190808035600019169060200190929190803590602001908201803590602001919091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506131c2565b604051808215151515815260200191505060405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546001816001161561010002031660029004905014159050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aa657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b236460405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008460016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015610c0b5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515610c1657600080fd5b853373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c8f57600080fd5b836001600089600019166000191681526020019081526020016000206002018787604051808383808284378201915050925050509081526020016040518091039020816000191690555086600019167fb829c3e412537bbe794c048ccb9e4605bb4aaaa8e4d4c15c1a6e0c2adc1716ea878789896040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a2600192505050949350505050565b600082828080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060016000826040518082805190602001908083835b602083101515610dce5780518252602082019150602081019050602083039250610da9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015610efc5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836040518082805190602001908083835b602083101515610e7c5780518252602082019150602081019050602083039250610e57565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515610f0757600080fd5b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050503373ffffffffffffffffffffffffffffffffffffffff1660016000836040518082805190602001908083835b602083101515610f8b5780518252602082019150602081019050602083039250610f66565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561101457600080fd5b8484600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906110629291906133d6565b503373ffffffffffffffffffffffffffffffffffffffff167f098ae8581bb8bd9af1beaf7f2e9f51f31a8e5a8bfada4e303a645d71d9c919208686604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a260019250505092915050565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156111675750600060016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b151561117257600080fd5b600354341015151561118357600080fd5b3360016000856000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1683600019167f4963513eca575aba66fdcd25f267aae85958fe6fb97e75fa25d783f1a091a22160405160405180910390a36001915050919050565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156112d95750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156112e457600080fd5b823373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561135d57600080fd5b83600019166002600060016000886000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051808280546001816001161561010002031660029004801561143a5780601f1061141857610100808354040283529182019161143a565b820191906000526020600020905b815481529060010190602001808311611426575b505091505060405180910390206000191614156116655760016000856000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f12491ad95fd945e444d88a894ffad3c21959880a4dcd8af99d4ae4ffc71d4abd6002600060016000896000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156115cd5780601f106115a2576101008083540402835291602001916115cd565b820191906000526020600020905b8154815290600101906020018083116115b057829003601f168201915b50509250505060405180910390a26002600060016000876000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006116649190613456565b5b6001806000866000191660001916815260200190815260200160002060010160146101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff1684600019167fef1961b4d2909dc23643b309bfe5c3e5646842d98c3a58517037ef3871185af360405160405180910390a3600192505050919050565b60008360016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156117955750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b15156117a057600080fd5b600160008660001916600019168152602001908152602001600020600201848460405180838380828437820191505092505050908152602001604051809103902054600190049150509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561184d57600080fd5b816003819055507f6bbc57480a46553fa4d156ce702beef5f3ad66303b0ed1a5d4cb44966c6584c3826040518082815260200191505060405180910390a160019050919050565b60008260016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff1615801561193b5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561194657600080fd5b833373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156119bf57600080fd5b8360016000876000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1686600019167f7b97c62130aa09acbbcbf7482630e756592496f1759eaf702f469cf64dfb779460405160405180910390a460019250505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008360016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015611b535750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611b5e57600080fd5b6001600086600019166000191681526020019081526020016000206002018484604051808383808284378201915050925050509081526020016040518091039020549150509392505050565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015611c515750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611c5c57600080fd5b600060016000856000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d1a57600080fd5b7fdef931299fe61d176f949118058530c1f3f539dcb6950b4e372c9b835c33ca073073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611dc5573d6000803e3d6000fd5b506001905090565b60008084848080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060016000826040518082805190602001908083835b602083101515611e3d5780518252602082019150602081019050602083039250611e18565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015611f6b5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836040518082805190602001908083835b602083101515611eeb5780518252602082019150602081019050602083039250611ec6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515611f7657600080fd5b85856040518083838082843782019150509250505060405180910390203373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561200b57600080fd5b86866040518083838082843782019150509250505060405180910390209250600060016000856000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561217a575082600019166002600060016000876000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180828054600181600116156101000203166002900480156121675780601f10612145576101008083540402835291820191612167565b820191906000526020600020905b815481529060010190602001808311612153575b5050915050604051809103902060001916145b156122af576002600060016000866000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006122089190613456565b60016000846000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f12491ad95fd945e444d88a894ffad3c21959880a4dcd8af99d4ae4ffc71d4abd8888604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a25b8460016000856000191660001916815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff167f728435a0031f6a04538fcdd24922a7e06bc7bc945db03e83d22122d1bc5f28df8888604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a2600193505050509392505050565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156124295750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561243457600080fd5b600060016000856000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60008360016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff1615801561253c5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561254757600080fd5b600160008660001916600019168152602001908152602001600020600201848460405180838380828437820191505092505050908152602001604051809103902054600190049150509392505050565b60035481565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156126445750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561264f57600080fd5b60016000846000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60008160016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff1615801561273d5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561274857600080fd5b60016000846000191660001916815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128645780601f1061283957610100808354040283529160200191612864565b820191906000526020600020905b81548152906001019060200180831161284757829003601f168201915b50505050509050919050565b60008460016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156129175750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561292257600080fd5b853373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561299b57600080fd5b836001026001600089600019166000191681526020019081526020016000206002018787604051808383808284378201915050925050509081526020016040518091039020816000191690555086600019167fb829c3e412537bbe794c048ccb9e4605bb4aaaa8e4d4c15c1a6e0c2adc1716ea878789896040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a2600192505050949350505050565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505060016000826040518082805190602001908083835b602083101515612add5780518252602082019150602081019050602083039250612ab8565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015612c0b5750600073ffffffffffffffffffffffffffffffffffffffff1660016000836040518082805190602001908083835b602083101515612b8b5780518252602082019150602081019050602083039250612b66565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515612c1657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c7157600080fd5b8484600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209190612cbf9291906133d6565b508273ffffffffffffffffffffffffffffffffffffffff167f098ae8581bb8bd9af1beaf7f2e9f51f31a8e5a8bfada4e303a645d71d9c919208686604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a260019150509392505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e075780601f10612ddc57610100808354040283529160200191612e07565b820191906000526020600020905b815481529060010190602001808311612dea57829003601f168201915b505050505060016000826040518082805190602001908083835b602083101515612e465780518252602082019150602081019050602083039250612e21565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060010160149054906101000a900460ff16158015612f745750600073ffffffffffffffffffffffffffffffffffffffff1660016000836040518082805190602001908083835b602083101515612ef45780518252602082019150602081019050602083039250612ecf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1515612f7f57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff167f12491ad95fd945e444d88a894ffad3c21959880a4dcd8af99d4ae4ffc71d4abd600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561307f5780601f106130545761010080835404028352916020019161307f565b820191906000526020600020905b81548152906001019060200180831161306257829003601f168201915b50509250505060405180910390a260016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051808280546001816001161561010002031660029004801561312b5780601f1061310957610100808354040283529182019161312b565b820191906000526020600020905b815481529060010190602001808311613117575b505091505060405180910390206000191660001916815260200190815260200160002060010160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006131bf9190613456565b50565b60008460016000826000191660001916815260200190815260200160002060010160149054906101000a900460ff161580156132695750600073ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561327457600080fd5b853373ffffffffffffffffffffffffffffffffffffffff1660016000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156132ed57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166001026001600089600019166000191681526020019081526020016000206002018787604051808383808284378201915050925050509081526020016040518091039020816000191690555086600019167fb829c3e412537bbe794c048ccb9e4605bb4aaaa8e4d4c15c1a6e0c2adc1716ea878789896040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a2600192505050949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061341757803560ff1916838001178555613445565b82800160010185558215613445579182015b82811115613444578235825591602001919060010190613429565b5b509050613452919061349e565b5090565b50805460018160011615610100020316600290046000825580601f1061347c575061349b565b601f01602090049060005260206000209081019061349a919061349e565b5b50565b6134c091905b808211156134bc5760008160009055506001016134a4565b5090565b905600a165627a7a72305820bb17c4636b023de0852a2f03fb119d82ad8ca478361e2b13ed7cb95dc2529d020029\r\n";

    public static final String FUNC_CANREVERSE = "canReverse";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETDATA = "setData";

    public static final String FUNC_CONFIRMREVERSE = "confirmReverse";

    public static final String FUNC_RESERVE = "reserve";

    public static final String FUNC_DROP = "drop";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_SETFEE = "setFee";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETDATA = "getData";

    public static final String FUNC_RESERVED = "reserved";

    public static final String FUNC_DRAIN = "drain";

    public static final String FUNC_PROPOSEREVERSE = "proposeReverse";

    public static final String FUNC_HASREVERSE = "hasReverse";

    public static final String FUNC_GETUINT = "getUint";

    public static final String FUNC_FEE = "fee";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETREVERSE = "getReverse";

    public static final String FUNC_REVERSE = "reverse";

    public static final String FUNC_SETUINT = "setUint";

    public static final String FUNC_CONFIRMREVERSEAS = "confirmReverseAs";

    public static final String FUNC_REMOVEREVERSE = "removeReverse";

    public static final String FUNC_SETADDRESS = "setAddress";

    public static final Event DRAINED_EVENT = new Event("Drained", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event FEECHANGED_EVENT = new Event("FeeChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event REVERSEPROPOSED_EVENT = new Event("ReverseProposed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVERSECONFIRMED_EVENT = new Event("ReverseConfirmed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVERSEREMOVED_EVENT = new Event("ReverseRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RESERVED_EVENT = new Event("Reserved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFERRED_EVENT = new Event("Transferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DROPPED_EVENT = new Event("Dropped", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event DATACHANGED_EVENT = new Event("DataChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWOWNER_EVENT = new Event("NewOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected SimpleRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SimpleRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SimpleRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SimpleRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> canReverse(String _data) {
        final Function function = new Function(FUNC_CANREVERSE, 
                Arrays.<Type>asList(new Address(160, _data)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setOwner(String _new) {
        final Function function = new Function(
                FUNC_SETOWNER,
                Arrays.<Type>asList(new Address(160, _new)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setData(byte[] _name, String _key, byte[] _value) {
        final Function function = new Function(
                FUNC_SETDATA,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key),
                new Bytes32(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmReverse(String _name) {
        final Function function = new Function(
                FUNC_CONFIRMREVERSE,
                Arrays.<Type>asList(new Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reserve(byte[] _name, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RESERVE,
                Arrays.<Type>asList(new Bytes32(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> drop(byte[] _name) {
        final Function function = new Function(
                FUNC_DROP,
                Arrays.<Type>asList(new Bytes32(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getAddress(byte[] _name, String _key) {
        final Function function = new Function(FUNC_GETADDRESS,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setFee(BigInteger _amount) {
        final Function function = new Function(
                FUNC_SETFEE,
                Arrays.<Type>asList(new Uint256(_amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(byte[] _name, String _to) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new Bytes32(_name),
                new Address(160, _to)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getData(byte[] _name, String _key) {
        final Function function = new Function(FUNC_GETDATA,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> reserved(byte[] _name) {
        final Function function = new Function(FUNC_RESERVED,
                Arrays.<Type>asList(new Bytes32(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> drain() {
        final Function function = new Function(
                FUNC_DRAIN,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeReverse(String _name, String _who) {
        final Function function = new Function(
                FUNC_PROPOSEREVERSE,
                Arrays.<Type>asList(new Utf8String(_name),
                new Address(160, _who)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasReverse(byte[] _name) {
        final Function function = new Function(FUNC_HASREVERSE,
                Arrays.<Type>asList(new Bytes32(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> getUint(byte[] _name, String _key) {
        final Function function = new Function(FUNC_GETUINT,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> fee() {
        final Function function = new Function(FUNC_FEE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner(byte[] _name) {
        final Function function = new Function(FUNC_GETOWNER,
                Arrays.<Type>asList(new Bytes32(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getReverse(byte[] _name) {
        final Function function = new Function(FUNC_GETREVERSE,
                Arrays.<Type>asList(new Bytes32(_name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> reverse(String _data) {
        final Function function = new Function(FUNC_REVERSE,
                Arrays.<Type>asList(new Address(160, _data)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setUint(byte[] _name, String _key, BigInteger _value) {
        final Function function = new Function(
                FUNC_SETUINT,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key),
                new Uint256(_value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmReverseAs(String _name, String _who) {
        final Function function = new Function(
                FUNC_CONFIRMREVERSEAS,
                Arrays.<Type>asList(new Utf8String(_name),
                new Address(160, _who)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeReverse() {
        final Function function = new Function(
                FUNC_REMOVEREVERSE,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAddress(byte[] _name, String _key, String _value) {
        final Function function = new Function(
                FUNC_SETADDRESS,
                Arrays.<Type>asList(new Bytes32(_name),
                new Utf8String(_key),
                new Address(160, _value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<DrainedEventResponse> getDrainedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DRAINED_EVENT, transactionReceipt);
        ArrayList<DrainedEventResponse> responses = new ArrayList<DrainedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DrainedEventResponse typedResponse = new DrainedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DrainedEventResponse> drainedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DrainedEventResponse>() {
            @Override
            public DrainedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DRAINED_EVENT, log);
                DrainedEventResponse typedResponse = new DrainedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DrainedEventResponse> drainedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DRAINED_EVENT));
        return drainedEventFlowable(filter);
    }

    public List<FeeChangedEventResponse> getFeeChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(FEECHANGED_EVENT, transactionReceipt);
        ArrayList<FeeChangedEventResponse> responses = new ArrayList<FeeChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            FeeChangedEventResponse typedResponse = new FeeChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FeeChangedEventResponse> feeChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FeeChangedEventResponse>() {
            @Override
            public FeeChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(FEECHANGED_EVENT, log);
                FeeChangedEventResponse typedResponse = new FeeChangedEventResponse();
                typedResponse.log = log;
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FeeChangedEventResponse> feeChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FEECHANGED_EVENT));
        return feeChangedEventFlowable(filter);
    }

    public List<ReverseProposedEventResponse> getReverseProposedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVERSEPROPOSED_EVENT, transactionReceipt);
        ArrayList<ReverseProposedEventResponse> responses = new ArrayList<ReverseProposedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReverseProposedEventResponse typedResponse = new ReverseProposedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReverseProposedEventResponse> reverseProposedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReverseProposedEventResponse>() {
            @Override
            public ReverseProposedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVERSEPROPOSED_EVENT, log);
                ReverseProposedEventResponse typedResponse = new ReverseProposedEventResponse();
                typedResponse.log = log;
                typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReverseProposedEventResponse> reverseProposedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVERSEPROPOSED_EVENT));
        return reverseProposedEventFlowable(filter);
    }

    public List<ReverseConfirmedEventResponse> getReverseConfirmedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVERSECONFIRMED_EVENT, transactionReceipt);
        ArrayList<ReverseConfirmedEventResponse> responses = new ArrayList<ReverseConfirmedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReverseConfirmedEventResponse typedResponse = new ReverseConfirmedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReverseConfirmedEventResponse> reverseConfirmedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReverseConfirmedEventResponse>() {
            @Override
            public ReverseConfirmedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVERSECONFIRMED_EVENT, log);
                ReverseConfirmedEventResponse typedResponse = new ReverseConfirmedEventResponse();
                typedResponse.log = log;
                typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReverseConfirmedEventResponse> reverseConfirmedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVERSECONFIRMED_EVENT));
        return reverseConfirmedEventFlowable(filter);
    }

    public List<ReverseRemovedEventResponse> getReverseRemovedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVERSEREMOVED_EVENT, transactionReceipt);
        ArrayList<ReverseRemovedEventResponse> responses = new ArrayList<ReverseRemovedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReverseRemovedEventResponse typedResponse = new ReverseRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReverseRemovedEventResponse> reverseRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReverseRemovedEventResponse>() {
            @Override
            public ReverseRemovedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVERSEREMOVED_EVENT, log);
                ReverseRemovedEventResponse typedResponse = new ReverseRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.reverse = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReverseRemovedEventResponse> reverseRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVERSEREMOVED_EVENT));
        return reverseRemovedEventFlowable(filter);
    }

    public List<ReservedEventResponse> getReservedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESERVED_EVENT, transactionReceipt);
        ArrayList<ReservedEventResponse> responses = new ArrayList<ReservedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReservedEventResponse typedResponse = new ReservedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReservedEventResponse> reservedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ReservedEventResponse>() {
            @Override
            public ReservedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RESERVED_EVENT, log);
                ReservedEventResponse typedResponse = new ReservedEventResponse();
                typedResponse.log = log;
                typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReservedEventResponse> reservedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESERVED_EVENT));
        return reservedEventFlowable(filter);
    }

    public List<TransferredEventResponse> getTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERRED_EVENT, transactionReceipt);
        ArrayList<TransferredEventResponse> responses = new ArrayList<TransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferredEventResponse typedResponse = new TransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferredEventResponse> transferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferredEventResponse>() {
            @Override
            public TransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERRED_EVENT, log);
                TransferredEventResponse typedResponse = new TransferredEventResponse();
                typedResponse.log = log;
                typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferredEventResponse> transferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERRED_EVENT));
        return transferredEventFlowable(filter);
    }

    public List<DroppedEventResponse> getDroppedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DROPPED_EVENT, transactionReceipt);
        ArrayList<DroppedEventResponse> responses = new ArrayList<DroppedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DroppedEventResponse typedResponse = new DroppedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DroppedEventResponse> droppedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DroppedEventResponse>() {
            @Override
            public DroppedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DROPPED_EVENT, log);
                DroppedEventResponse typedResponse = new DroppedEventResponse();
                typedResponse.log = log;
                typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DroppedEventResponse> droppedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DROPPED_EVENT));
        return droppedEventFlowable(filter);
    }

    public List<DataChangedEventResponse> getDataChangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DATACHANGED_EVENT, transactionReceipt);
        ArrayList<DataChangedEventResponse> responses = new ArrayList<DataChangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DataChangedEventResponse typedResponse = new DataChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.key = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.plainKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DataChangedEventResponse> dataChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DataChangedEventResponse>() {
            @Override
            public DataChangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DATACHANGED_EVENT, log);
                DataChangedEventResponse typedResponse = new DataChangedEventResponse();
                typedResponse.log = log;
                typedResponse.name = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.key = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.plainKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DataChangedEventResponse> dataChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DATACHANGED_EVENT));
        return dataChangedEventFlowable(filter);
    }

    public List<NewOwnerEventResponse> getNewOwnerEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWOWNER_EVENT, transactionReceipt);
        ArrayList<NewOwnerEventResponse> responses = new ArrayList<NewOwnerEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewOwnerEventResponse typedResponse = new NewOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.old = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewOwnerEventResponse> newOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewOwnerEventResponse>() {
            @Override
            public NewOwnerEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWOWNER_EVENT, log);
                NewOwnerEventResponse typedResponse = new NewOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.old = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewOwnerEventResponse> newOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWOWNER_EVENT));
        return newOwnerEventFlowable(filter);
    }

    @Deprecated
    public static SimpleRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SimpleRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SimpleRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SimpleRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SimpleRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SimpleRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SimpleRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SimpleRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SimpleRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SimpleRegistry.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SimpleRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SimpleRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SimpleRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SimpleRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SimpleRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SimpleRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DrainedEventResponse extends BaseEventResponse {
        public BigInteger amount;
    }

    public static class FeeChangedEventResponse extends BaseEventResponse {
        public BigInteger amount;
    }

    public static class ReverseProposedEventResponse extends BaseEventResponse {
        public String reverse;

        public String name;
    }

    public static class ReverseConfirmedEventResponse extends BaseEventResponse {
        public String reverse;

        public String name;
    }

    public static class ReverseRemovedEventResponse extends BaseEventResponse {
        public String reverse;

        public String name;
    }

    public static class ReservedEventResponse extends BaseEventResponse {
        public byte[] name;

        public String owner;
    }

    public static class TransferredEventResponse extends BaseEventResponse {
        public byte[] name;

        public String oldOwner;

        public String newOwner;
    }

    public static class DroppedEventResponse extends BaseEventResponse {
        public byte[] name;

        public String owner;
    }

    public static class DataChangedEventResponse extends BaseEventResponse {
        public byte[] name;

        public String key;

        public String plainKey;
    }

    public static class NewOwnerEventResponse extends BaseEventResponse {
        public String old;

        public String current;
    }
}
